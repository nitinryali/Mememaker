{"version":3,"sources":["THA-22/Temp.jsx","THA-22/Meme.jsx","THA-22/App.jsx","index.js"],"names":["Temp","_ref","temp","setMeme","_jsx","className","children","map","temps","onClick","style","backgroundImage","concat","url","id","Meme","meme","_useState","useState","template_id","username","password","boxes","_useState2","_slicedToArray","form","setForm","_jsxs","src","alt","_toConsumableArray","Array","box_count","_","index","type","placeholder","onChange","e","newBox","text","target","value","_objectSpread","title","box","console","log","fetch","then","res","json","data","success","alert","xhr","XMLHttpRequest","open","responseType","onload","imageUrl","window","URL","webkitURL","createObjectURL","this","response","tag","document","createElement","href","download","body","appendChild","click","removeChild","send","App","setTemp","_useState3","_useState4","useEffect","memes","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e6fc80f.chunk.js","sourcesContent":["// import { useState, useEffect } from \"react\";\nconst Temp = ({ temp, setMeme }) => {\n    return (\n        <div className=\"Templates\">\n            {temp.map(temps => (\n                <div key={temps.id}\n                    className=\"template\"\n                    onClick={() => {\n                        setMeme(temps)\n                        // console.log(setMeme);\n                    }}>\n                    <div style={{ backgroundImage: `url(${temps.url})` }} className=\"meme\">\n\n                    </div>\n                </div>\n            ))}\n        </div>);\n}\n\nexport default Temp;\n","import { useState } from \"react\";\n\nconst Meme = ({ meme, setMeme }) => {\n    const [form, setForm] = useState({\n        template_id: meme.id,\n        username: \"RituGupta\",\n        password: \"Ritu@123\",\n        boxes: [],\n\n    });\n\n    const generatememe = () => {\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\n        form.boxes.map((box, index) => {\n            return (url += (`&boxes[${index}][text]=${box.text}`));\n        });\n        console.log(url)\n        fetch(url).then((res) => res.json())\n            .then((data) => {\n                if (data.success === true) {\n                    setMeme({ ...meme, url: data.data.url })\n\n                } else {\n                    alert(\"Enter Some Text\");\n                }\n\n            })\n    }\n\n    // const save = () => {\n\n    //     console.log(meme.url);\n    // }\n    function save() {\n        var xhr = new XMLHttpRequest();\n        var url = meme.url;\n        xhr.open(\"GET\", url, true);\n        xhr.responseType = \"blob\";\n        xhr.onload = function () {\n            var urlCreator = window.URL || window.webkitURL;\n            var imageUrl = urlCreator.createObjectURL(this.response);\n            var tag = document.createElement('a');\n            tag.href = imageUrl;\n            tag.download = \"meme\";\n            document.body.appendChild(tag);\n            tag.click();\n            document.body.removeChild(tag);\n        }\n        xhr.send();\n    }\n    return (\n        <div className=\"memebnao\">\n            <img src={meme.url} alt=\"meme\"></img>\n\n            <div>\n                {[...Array(meme.box_count)].map((_, index) => (\n                    <input\n                        key={index}\n                        type=\"text\"\n                        placeholder={`meme caption-${index + 1}`}\n                        onChange={(e) => {\n\n                            const newBox = form.boxes;\n                            newBox[index] = { text: e.target.value };\n                            setForm({ ...form, boxes: newBox });\n                        }}>\n\n                    </input>))}\n            </div>\n\n            <div className=\"btns\">\n                <span> <button className=\"backbtn\" title=\"Back\" onClick={() => { setMeme(null) }}>Back</button></span>\n                <span><button className=\"generatebutton\" onClick={generatememe}>Generate Meme</button></span>\n                <span><button className=\"generatebutton\" onClick={save} >Save</button></span>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Meme;","import React from \"react\";\nimport \"./style.css\"\nimport Temp from \"./Temp\"\nimport Meme from \"./Meme\"\nimport { useState, useEffect } from \"react\";\n\nconst App = () => {\n    const [temp, setTemp] = useState([]);\n    const [meme, setMeme] = useState(null);\n    useEffect(() => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then((res) => res.json())\n            .then((data) => {\n                setTemp(data.data.memes);\n            })\n    }, []);\n    return (\n        <div className=\"App\">\n            <h1>Meme Maker</h1>\n            {meme === null ? (<Temp temp={temp} setMeme={setMeme} />) : (<Meme meme={meme} setMeme={setMeme} />)}\n        </div>\n    );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./THA-22/App\"\n\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}